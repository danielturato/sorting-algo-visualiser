{"version":3,"sources":["components/Menu.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","components/App.js","index.js"],"names":["Menu","className","id","onClick","props","generateArray","bubbleSort","insertionSort","selectionSort","mergeSort","quickSort","heapSort","this","array","map","value","idx","key","style","backgroundColor","height","Component","BubbleSort","animations","counter","isSorted","i","length","animation","push","swap","j","temp","BubbleSortAnimations","InsertionSort","InsertionSortAnimations","SelectionSort","startIdx","lowestIdx","SelectionSortAnimations","MergeSort","arr","endIdx","auxArr","middleIdx","Math","floor","merge","k","MergeSortAnimations","slice","QuickSort","originalArray","leftIdx","rightIdx","recursiveCall","partitionIdx","partition","pivot","currentIdx","QuickSortAnimations","HeapSort","heapify","curIdx","siftDown","heap","leftChild","rightChild","greatestChild","HeapSortAnimations","App","state","bind","random","setState","resetArrayBars","arrCopy","sort","arrState","buttonPressed","buttons","document","querySelector","children","currentButton","pointerEvents","color","onmouseover","onmouseleave","firstElement","secondElement","colour","firstHeight","querySelectorAll","visualizerArray","getVisualizerArrayBars","toggleResetArray","comparisons","swapped","finished","firstValue","secondValue","setTimeout","swapHeights","comparison","sorted","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1caa8e66.chunk.js","sourcesContent":[" import React, {Component} from 'react';\n\n const DEFAULT_COLOUR = '#00818A';\n\n /** \n  * Models & Controls the Menu to be display on the website\n */\n class Menu extends Component {\n\n    /** \n     * Renders the menu dom elements\n    */\n     render() {\n        return (\n            <div>\n                <nav className=\"main-nav\">\n                    <ul className=\"main-nav-items\">\n                    <li id=\"resetArray\" onClick={() => this.props.generateArray()}>\n                    Reset Array\n                    </li>\n                    <li id=\"bubbleSort\" onClick={() => this.props.bubbleSort()}>\n                    Bubble Sort\n                    </li>\n                    <li id=\"insertionSort\" onClick={() => this.props.insertionSort()}>\n                    Insertion Sort\n                    </li>\n                    <li id=\"selectionSort\" onClick={() => this.props.selectionSort()}>\n                    Selection Sort\n                    </li>\n                    <li id=\"mergeSort\" onClick={() => this.props.mergeSort()}>\n                    Merge Sort\n                    </li>\n                    <li id=\"quickSort\" onClick={() => this.props.quickSort()}>\n                    Quick Sort\n                    </li>\n                    <li id=\"heapSort\" onClick={() => this.props.heapSort()}>\n                    Heap Sort\n                    </li>\n                    </ul>\n                </nav>\n\n                <div className=\"list-container\">\n                    {this.props.array.map((value, idx) => (\n                    <div \n                        className = \"list-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: DEFAULT_COLOUR,\n                        height: `${value}px`\n                        }}>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n     }\n }\n\nexport default Menu;","/**\n * Get the animations generated from the Bubble Sort Algorithms \n * @param {int[]} array - The array to be sorted\n */\nconst BubbleSortAnimations = (array) => {\n    return BubbleSort(array);\n}\n\n/**\n * Sort the given array in-place using the Bubble Sort Algorithm.\n * Returns the animations generated from the algorithm. \n * @param {int[]} array \n */\nconst BubbleSort = (array) => {\n    const animations = [];\n    var counter = 0;\n    var isSorted = false;\n\n    while(!isSorted) {\n        isSorted = true;\n        \n        for (let i=0; i<array.length - 1 - counter; i++) {\n            var animation = [];\n            if (array[i] > array[i+1]) {\n                animation.push([i, i+1], true);\n                swap(i, i+1, array);\n                isSorted = false;\n            } else {\n                animation.push([i, i+1], false);\n            }\n\n            animation.push((i+1) >= (array.length-1-counter) ? true : false);\n            animations.push(animation);\n        }\n\n        if (isSorted) {\n            for (let i=0; i<array.length - 1 - counter; i++) {\n                animations.push([[null, i], false, true]);\n            }\n        }\n\n        counter++;\n    }\n\n    return animations;\n}\n\n/**\n * Swap two values at two given indexes in an array\n * @param {int} i - Index one\n * @param {int} j - Index two\n * @param {int[]} array - The array in which the values will be swapped in\n */\nconst swap = (i, j, array) => {\n    const temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n}\n\nexport default BubbleSortAnimations;","/**\n * Compute the Insertion Sort Algorithm, returning an array of generated animations\n * @param {int[]} array - The unsorted array of values\n */\nconst InsertionSortAnimations = (array) => {\n    return InsertionSort(array);\n}\n\n/**\n * Compute the Insertion Sort Algorithm\n * @param {int[]} array - The unsorted array of values\n */\nconst InsertionSort = (array) => {\n    const animations = [];\n\n    for (let i=1; i<array.length; i++) {\n        var j = i;\n        while (j >= 0 && array[j] < array[j-1]) {\n            animations.push([j, j-1]);\n            swap(j, j-1, array);\n            j -= 1;\n        }\n    }\n\n    return animations;\n}\n\n/**\n * Swap two values in an array at two given indexes \n * @param {int} i - The first index\n * @param {int} j - The second index\n * @param {int[]} array - The arrays the values will be swapped in\n */\nconst swap = (i, j, array) => {\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}\n\nexport default InsertionSortAnimations;","/**\n * Computes the Selection Sort Algorithm, returning a generated array of animations\n * @param {int[]} array - The array of unsorted values\n */\nconst SelectionSortAnimations = (array) => {\n    return SelectionSort(array);\n}\n\n/**\n * Computes the Selection Sort Algorithm\n * @param {int[]} array - The array of unsorted values\n */\nconst SelectionSort = (array) => {\n    var startIdx = 0;\n    var animations = [];\n\n    while (startIdx < array.length - 1) {\n        var lowestIdx = startIdx;\n        for (let i= startIdx + 1; i < array.length; i++) {\n            if (array[i] < array[lowestIdx]) {\n                lowestIdx = i;\n            }\n        }\n        animations.push([startIdx, lowestIdx]);\n        swap(startIdx, lowestIdx, array);\n        startIdx++;\n    }\n\n    animations.push([array.length-1, null]);\n\n    return animations;\n}\n\n/**\n * Swap two values in an array based on two given indexes\n * @param {int} i - The first index\n * @param {int} j - The second index\n * @param {int[]} array - The array where the values will be swapped in\n */\nconst swap = (i, j, array) => {\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}\n\nexport default SelectionSortAnimations;","/**\n * Compute the Merge Sort Algorithm, returning an array of generated animations\n * @param {int[]} array - The array of unsorted values\n */\nconst MergeSortAnimations = (array) => {\n    const animations = [];\n    const auxArr = array.slice();\n    MergeSort(array, 0, array.length - 1, auxArr, animations);\n    return animations;\n}\n\n/**\n * Compute the Merge Sort algorithm\n * @param {int[]} arr - The array of unsorted values\n * @param {int} startIdx - The start index to be sorted\n * @param {int} endIdx - The end index to be sorted\n * @param {int[]} auxArr - The auxillary array\n * @param {Object[]} animations - The array of generated animations\n */\nconst MergeSort = (arr, startIdx, endIdx, auxArr, animations) => {\n    if (startIdx === endIdx) {\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n\n    MergeSort(auxArr, startIdx, middleIdx, arr, animations);\n    MergeSort(auxArr, middleIdx+1, endIdx, arr, animations);\n    merge(arr, startIdx, middleIdx, endIdx, auxArr, animations);\n}\n\n/**\n * Used to merge two sorted arrays\n * @param {int[]} arr - The first array\n * @param {int} startIdx - The starting index\n * @param {int} middleIdx - The middle index\n * @param {int} endIdx - The end index\n * @param {int[]} auxArr - The second/auxillary array\n * @param {Object[]} animations - The array of generated animations\n */\nconst merge = (arr, startIdx, middleIdx, endIdx, auxArr, animations) => {\n   let k = startIdx;\n   let i = startIdx;\n   let j = middleIdx + 1;\n\n   while (i <= middleIdx && j <= endIdx) {\n       animations.push([[i, j], false]);\n       if (auxArr[i] <= auxArr[j]) {\n           animations.push([[k, auxArr[i]], true]);\n           arr[k++] = auxArr[i++];\n       } else {\n           animations.push([[k, auxArr[j]], true]);\n           arr[k++] = auxArr[j++];\n       }\n   }\n\n   while (i <= middleIdx) {\n       animations.push([[i, i], false]);\n       animations.push([[k, auxArr[i]], true]);\n       arr[k++] = auxArr[i++];\n   }\n\n   while (j <= endIdx) {\n       animations.push([[j, j], false]);\n       animations.push([[k, auxArr[j]], true]);\n       arr[k++] = auxArr[j++];\n   }\n}\n\nexport default MergeSortAnimations;","/**\n * Compute the Quick Sort algorithm , returning an array of generated animations\n * @param {int[]} array - The array of unsorted values\n */\nconst QuickSortAnimations = (array) => {\n    const animations = []\n    QuickSort(array, 0, array.length -1, false, animations);\n    \n    return animations;\n}\n\n/**\n * Compute the Quick Sort Algorithm\n * @param {int[]} originalArray - The original unsorted array of values\n * @param {int} leftIdx - The current left index\n * @param {int} rightIdx - The current right index\n * @param {boolean} recursiveCall - Suggets if it is currently in a recurisve call\n * @param {Object[]} animations - Array of animations\n */\n const QuickSort = (originalArray, leftIdx, rightIdx, recursiveCall, animations) => {\n    const array = recursiveCall ? originalArray : originalArray.slice();\n\n    if (leftIdx < rightIdx) {\n      const partitionIdx = partition(array, leftIdx, rightIdx, animations);\n      const RECURSIVE_CALL = true;\n      QuickSort(array, leftIdx, partitionIdx - 1, RECURSIVE_CALL, animations);\n      QuickSort(array, partitionIdx + 1, rightIdx, RECURSIVE_CALL, animations);\n    }\n\n}\n\n/**\n * Computes a partition index based on a left & right index\n * @param {int[]} array - The array of values\n * @param {int} leftIdx - The left index\n * @param {int} rightIdx - The right index\n * @param {Object[]} animations - The array of generated animations\n */\nconst partition = (array, leftIdx, rightIdx, animations) => {\n  const pivot = array[rightIdx];\n  let partitionIdx = leftIdx;\n\n  for (let currentIdx = leftIdx; currentIdx < rightIdx; currentIdx++) {  \n    if (array[currentIdx] < pivot) {\n      animations.push([[partitionIdx, currentIdx], true]);\n      swap(partitionIdx, currentIdx, array);\n\n      partitionIdx += 1;\n    } else {\n      animations.push([[currentIdx, rightIdx], false]);\n    }\n  }\n\n  animations.push([[partitionIdx, rightIdx], true]);\n  swap(partitionIdx, rightIdx, array);\n\n  return partitionIdx;\n}\n\n/**\n * Swap two values in an array at two given indexes\n * @param {int} i - The first index\n * @param {int} j - The second index\n * @param {int[]} array - The array the values will be swapped in\n */\nconst swap = (i, j, array) => {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\nexport default QuickSortAnimations;","/**\n * Returns the animations generated from the Heap Sort Algorithm\n * @param {int[]} array - The unsorted array of values\n */\nconst HeapSortAnimations = (array) => {\n    const animations = [];\n    HeapSort(array, animations);\n\n    return animations;\n}\n\n/**\n * Compute the Heap Sort algorithm\n * @param {int[]} array - The unsorted array of values\n * @param {Object[]} animations - Array of generated animations from the Heap Sort\n */\nconst HeapSort = (array, animations) => {\n    heapify(array, animations);\n\n    for(let curIdx = array.length - 1; curIdx > 0; curIdx--) {\n        animations.push([0, curIdx, true]);\n        swap(0, curIdx, array);\n        siftDown(0, curIdx - 1, array, animations);\n    }\n}\n\n/**\n * Used to transfer an array into a Max Binary Heap\n * @param {int[]} array - The unsorted array of values\n * @param {Object[]} animations - Array of generated animations from the Heap Sort\n */\nconst heapify = (array, animations) => {\n    var parent = Math.floor((array.length - 2) / 2);\n\n    for(let curIdx = parent; curIdx >= 0; curIdx--) {\n        siftDown(curIdx, array.length-1, array, animations);\n    }\n}\n\n/**\n * Used to sift a value from a particular starting point in the Heap, to a \n * particular end-point.\n * @param {int} curIdx - The starting index\n * @param {int} endIdx - The ending index\n * @param {int[]} heap - The Max Binary Heap\n * @param {Object[]} animations - Array of animations during the sift-down\n */\nconst siftDown = (curIdx, endIdx, heap, animations) => {\n    var leftChild = (2 * curIdx) + 1;\n\n    while (leftChild <= endIdx) {\n        const rightChild = (2 * curIdx) + 2 <= endIdx ? (2 * curIdx) + 2 : -1;\n\n        var greatestChild = -1\n        if (rightChild !== -1 && heap[rightChild] > heap[leftChild])  {\n            greatestChild = rightChild;\n        } else {\n            greatestChild = leftChild;\n        }\n\n        if (heap[greatestChild] > heap[curIdx]) {\n            animations.push([greatestChild, curIdx]);\n            swap(greatestChild, curIdx, heap);\n            curIdx = greatestChild;\n            leftChild = (2 * curIdx) + 1;\n        } else {\n            return;\n        }\n    }\n}\n\n/**\n * Swap two values in an array at two given indexes\n * @param {int} i - The first index \n * @param {int} j - The second index\n * @param {int[]} array - The array that the values will be swapped in\n */\nconst swap = (i, j, array)  => {\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}\n\n\n\nexport default HeapSortAnimations;","import React, {Component} from 'react';\n\nimport '../static/App.css';\nimport Menu from './Menu.js';\nimport BubbleSortAnimations from '../algorithms/BubbleSort.js';\nimport InsertionSortAnimations from '../algorithms/InsertionSort.js';\nimport SelectionSortAnimations from '../algorithms/SelectionSort.js';\nimport MergeSortAnimations from '../algorithms/MergeSort.js';\nimport QuickSortAnimations from '../algorithms/QuickSort.js';\nimport HeapSortAnimations from '../algorithms/HeapSort.js';\n\nconst ARRAY_SIZE = 250;\nconst ARRAY_MAX_VALUE = 700;\nconst ARRAY_MIN_VALUE = 5;\nconst ANIMATION_SPEED = 1;\nconst FINISHED_COLOUR = '#EC9B3B';\nconst DEFAULT_COLOUR = '#00818A';\nconst NAV_OPTION_COLOR = 'white';\nconst NAV_OPTION_COLOR_HOVER = '#ECECEB';\n\n/** \n * The App component models & handles the display of all algorithm animations\n*/\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.generateArray = this.generateArray.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.selectionSort = this.selectionSort.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n    this.heapSort = this.heapSort.bind(this);\n  }\n\n  state = {\n    array: []\n  };\n\n  /** \n   * When this component mounts, generate a new unsorted array\n  */\n  componentDidMount() {\n    this.generateArray();\n  }\n\n  /** \n   * Generate a new random unsorted array of values\n  */\n  generateArray() {\n    const array = [];\n    \n    for (let i = 0; i < ARRAY_SIZE; i++) {\n      array.push(Math.floor(Math.random() * (ARRAY_MAX_VALUE - ARRAY_MIN_VALUE + 1) + ARRAY_MIN_VALUE));\n    }\n\n    this.setState({array: array});\n    this.resetArrayBars();\n  }\n\n  /** \n   * Tests to see if the array is sorted. Returns a boolean value suggesting this.\n  */\n  arrayIsSorted() {\n    const arrCopy = this.state.array.slice();\n    arrCopy.sort();\n    const arrState = this.state.array;\n\n    for (let i = 0; i < arrState.length; i++) {\n      if (arrCopy[i] !== arrState[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Used to reset the array to default colours\n   * @param {string} style - The style the array should change too\n   * @param {Object} buttonPressed - The button that was pressed\n   */\n  toggleResetArray(style, buttonPressed) {\n    const buttons = document.querySelector('.main-nav-items').children;\n    for (let i = 0; i < buttons.length; i++) {\n      var currentButton = buttons[i];\n      currentButton.style.pointerEvents = style;\n\n      if (style === 'none') {\n        if (currentButton.id !== buttonPressed) {\n          currentButton.style.color = FINISHED_COLOUR;\n        } \n      } else {\n        currentButton.style.color = NAV_OPTION_COLOR;\n        \n        currentButton.onmouseover = function() {\n           this.style.color = NAV_OPTION_COLOR_HOVER;\n         }\n  \n         currentButton.onmouseleave = function() {\n          this.style.color = NAV_OPTION_COLOR;\n         }\n      } \n    }\n  }\n\n  /**\n   * Change the colour of the first & second dom element into a particular colour\n   * @param {*} firstElement - The first element to be changed\n   * @param {*} secondElement - The second element to be changed\n   * @param {*} colour - The colour they are changed too\n   */\n  changeColour(firstElement, secondElement, colour) {\n    firstElement.style.backgroundColor = colour;\n    secondElement.style.backgroundColor = colour;\n  }\n\n  /**\n   * Swap the heights of two dom elements\n   * @param {*} firstElement - The first dom element\n   * @param {*} secondElement - The second dom element\n   */\n  swapHeights(firstElement, secondElement) {\n    const firstHeight = firstElement.style.height;\n    firstElement.style.height = secondElement.style.height;\n    secondElement.style.height = firstHeight;\n  }\n\n  /** \n   * Get the visual dom elements representing the array\n  */\n  getVisualizerArrayBars() {\n    return document.querySelectorAll('.list-bar');\n  }\n\n  /** \n   * Reset the visual dom elements representing the array\n  */\n  resetArrayBars() {\n    const visualizerArray = this.getVisualizerArrayBars();\n    for (let i = 0; i < visualizerArray.length; i++) {\n      visualizerArray[i].style.backgroundColor = DEFAULT_COLOUR;\n    }\n  }\n\n  /** \n   * Perform the bubble sort algorithm and display the visual animations\n  */\n  bubbleSort() {\n    const animations = BubbleSortAnimations(this.state.array);\n    const visualizerArray = this.getVisualizerArrayBars();\n    this.toggleResetArray('none', 'bubbleSort');\n\n    for (let i=0; i < animations.length; i++) {\n\n      const comparisons = animations[i][0];\n      const swapped = animations[i][1];\n      const finished = animations[i][2];\n      const firstValue = visualizerArray[comparisons[0]];\n      const secondValue = visualizerArray[comparisons[1]];\n\n      if (finished) {\n        setTimeout(() => {\n          secondValue.style.backgroundColor = FINISHED_COLOUR;\n          this.toggleResetArray('none', 'bubbleSort');\n        }, i * ANIMATION_SPEED);\n      }\n\n      if (swapped) {\n        setTimeout(() => {\n          this.swapHeights(firstValue, secondValue);\n        }, i * ANIMATION_SPEED);\n      }\n\n      if ((i+1) === animations.length) {\n        setTimeout(() => {\n          this.toggleResetArray('auto', 'bubbleSort');\n        }, i * ANIMATION_SPEED)\n      }\n    \n    }\n  }\n\n  /** \n   * Perform the insertion sort algorit and display the visual animations\n  */\n  insertionSort() {\n    const animations = InsertionSortAnimations(this.state.array);\n    const visualizerArray = this.getVisualizerArrayBars(); \n    visualizerArray[0].style.backgroundColor = FINISHED_COLOUR;\n    \n    if (animations.length > 0) {\n      this.toggleResetArray('none', 'insertionSort');\n    }\n\n    for (let i=0; i < animations.length; i++) {\n      const comparisons = animations[i];\n      const firstValue = visualizerArray[comparisons[0]];\n      const secondValue = visualizerArray[comparisons[1]];\n\n      setTimeout(() => {\n        firstValue.style.backgroundColor = FINISHED_COLOUR;\n      }, i * ANIMATION_SPEED)\n\n      setTimeout(() => {\n        this.swapHeights(firstValue, secondValue);\n      }, i * ANIMATION_SPEED);\n\n      if ((i+1) === animations.length) {\n        setTimeout(() => {\n          this.toggleResetArray('auto', 'insertionSort');\n        }, i * ANIMATION_SPEED)\n      }\n\n     }\n  }\n\n  /** \n   * Perform the selection sort algorithm and display the visual animations\n  */\n  selectionSort() {\n    const animations = SelectionSortAnimations(this.state.array);\n    const visualizerArray = this.getVisualizerArrayBars();\n    this.toggleResetArray('none', 'selectionSort');\n\n    for (let i = 0; i < animations.length; i++) {\n      const comparisons = animations[i];\n      const firstValue = visualizerArray[comparisons[0]];\n      const secondValue = visualizerArray[comparisons[1]];\n\n      if (secondValue == null) {\n        setTimeout(() => {\n          firstValue.style.backgroundColor = FINISHED_COLOUR;\n        }, i * ANIMATION_SPEED)\n      } else {\n        setTimeout(() => {\n          firstValue.style.backgroundColor = FINISHED_COLOUR;\n        }, i * ANIMATION_SPEED)\n  \n        setTimeout(() => {\n          this.swapHeights(firstValue, secondValue);\n        }, i * ANIMATION_SPEED);\n      }\n\n      if ((i+1) === animations.length) {\n        setTimeout(() => {\n          this.toggleResetArray('auto', 'selectionSort');\n        }, i * ANIMATION_SPEED)\n      }\n    }\n  }\n\n  /**\n   * Peform the merge sort algorithm and display the visual animations\n   */\n  mergeSort() {\n    const animations = MergeSortAnimations(this.state.array);\n    const visualizerArray = this.getVisualizerArrayBars();\n    this.toggleResetArray('none', 'mergeSort');\n\n    for (let i = 0; i < animations.length; i++) {\n      const comparison = animations[i][0];\n      const swapped = animations[i][1];\n\n      if (swapped) {\n        setTimeout(() => {\n          visualizerArray[comparison[0]].style.height = `${comparison[1]}px`;\n          visualizerArray[comparison[0]].style.backgroundColor = FINISHED_COLOUR;\n        }, i * ANIMATION_SPEED);\n      }\n\n      if ((i+1) === animations.length) {\n        setTimeout(() => {\n          this.toggleResetArray('auto', 'mergeSort');\n        }, i * ANIMATION_SPEED)\n      }\n\n    }\n\n  }\n\n  /** \n   * Peform the quick sort algorithm and display the visual animations\n  */\n  quickSort() {\n    const animations = QuickSortAnimations(this.state.array);\n    const visualizerArray = this.getVisualizerArrayBars();\n    this.toggleResetArray('none', 'quickSort');\n    for (let i = 0; i < animations.length; i++) {\n      const comparison = animations[i][0];\n      const swapped = animations[i][1];\n\n      if (swapped) {\n        setTimeout(() => {\n          this.swapHeights(visualizerArray[comparison[0]], visualizerArray[comparison[1]]);\n          visualizerArray[comparison[0]].style.backgroundColor = FINISHED_COLOUR;\n        }, i * ANIMATION_SPEED);\n      }\n\n      if ((i+1) === animations.length) {\n        setTimeout(() => {\n          this.toggleResetArray('auto', 'quickSort');\n          visualizerArray[visualizerArray.length-1].style.backgroundColor = FINISHED_COLOUR;\n        }, i * ANIMATION_SPEED)\n      }\n    }\n  }\n\n  /** \n   * Perform the heap sort algorithm and display the visual animations\n  */\n  heapSort() {\n    const animations = HeapSortAnimations(this.state.array);\n    const visualizerArray = this.getVisualizerArrayBars();\n    this.toggleResetArray('none', 'heapSort');\n    var sorted = 0;\n    for (let i = 0; i < animations.length; i++) {\n      const swap = animations[i];\n\n      setTimeout(() => {\n        this.swapHeights(visualizerArray[swap[0]], visualizerArray[swap[1]]);\n        if (swap.length === 3) {\n          visualizerArray[visualizerArray.length - 1 - (sorted++)].style.backgroundColor = FINISHED_COLOUR;\n        }\n      }, i * ANIMATION_SPEED)\n\n      if ((i+1) === animations.length) {\n        setTimeout(() => {\n          this.toggleResetArray('auto', 'heapSort');\n          visualizerArray[0].style.backgroundColor = FINISHED_COLOUR;\n        }, i * ANIMATION_SPEED)\n      }\n    }\n  }\n\n  /** \n   * Render the initial menu and array to the dom\n  */\n  render() {\n    return (\n      <>\n        <Menu\n          array={this.state.array}\n          generateArray={this.generateArray}\n          bubbleSort={this.bubbleSort}\n          insertionSort={this.insertionSort}\n          selectionSort={this.selectionSort}\n          mergeSort={this.mergeSort}\n          quickSort={this.quickSort}\n          heapSort={this.heapSort}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './static/index.css';\nimport App from './components/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}