{"version":3,"sources":["algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSort.js","App.js","index.js"],"names":["BubbleSort","array","animations","counter","isSorted","i","length","animation","push","swap","j","temp","BubbleSortAnimations","InsertionSort","InsertionSortAnimations","SelectionSort","startIdx","lowestIdx","SelectionSortAnimations","MergeSort","arr","endIdx","auxArr","middleIdx","Math","floor","merge","k","MergeSortAnimations","slice","App","state","this","generateArray","random","setState","resetArrayBars","arrCopy","sort","arrState","style","buttonPressed","buttons","document","querySelector","children","currentButton","pointerEvents","id","color","onmouseover","onmouseleave","firstElement","secondElement","colour","backgroundColor","firstHeight","height","querySelectorAll","visualizerArray","getVisualizerArrayBars","toggleResetArray","comparisons","swapped","finished","firstValue","secondValue","setTimeout","swapHeights","comparison","className","onClick","bubbleSort","insertionSort","selectionSort","mergeSort","quickSort","heapSort","map","value","idx","key","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.443d2424.chunk.js","sourcesContent":["const BubbleSortAnimations = (array) => {\r\n    return BubbleSort(array);\r\n}\r\n\r\nconst BubbleSort = (array) => {\r\n    const animations = [];\r\n    var counter = 0;\r\n    var isSorted = false;\r\n\r\n    while(!isSorted) {\r\n        isSorted = true;\r\n        \r\n        for (let i=0; i<array.length - 1 - counter; i++) {\r\n            var animation = [];\r\n            if (array[i] > array[i+1]) {\r\n                animation.push([i, i+1], true);\r\n                swap(i, i+1, array);\r\n                isSorted = false;\r\n            } else {\r\n                animation.push([i, i+1], false);\r\n            }\r\n\r\n            animation.push((i+1) >= (array.length-1-counter) ? true : false);\r\n            animations.push(animation);\r\n        }\r\n\r\n        if (isSorted) {\r\n            for (let i=0; i<array.length - 1 - counter; i++) {\r\n                animations.push([[null, i], false, true]);\r\n            }\r\n        }\r\n\r\n        counter++;\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nconst swap = (i, j, array) => {\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}\r\n\r\nexport default BubbleSortAnimations;","const InsertionSortAnimations = (array) => {\r\n    return InsertionSort(array);\r\n}\r\n\r\nconst InsertionSort = (array) => {\r\n    const animations = [];\r\n\r\n    for (let i=1; i<array.length; i++) {\r\n        var j = i;\r\n        while (j >= 0 && array[j] < array[j-1]) {\r\n            animations.push([j, j-1]);\r\n            swap(j, j-1, array);\r\n            j -= 1;\r\n        }\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nconst swap = (i, j, array) => {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\nexport default InsertionSortAnimations;","const SelectionSortAnimations = (array) => {\r\n    return SelectionSort(array);\r\n}\r\n\r\nconst SelectionSort = (array) => {\r\n    var startIdx = 0;\r\n    var animations = [];\r\n\r\n    while (startIdx < array.length - 1) {\r\n        var lowestIdx = startIdx;\r\n        for (let i= startIdx + 1; i < array.length; i++) {\r\n            if (array[i] < array[lowestIdx]) {\r\n                lowestIdx = i;\r\n            }\r\n        }\r\n        animations.push([startIdx, lowestIdx]);\r\n        swap(startIdx, lowestIdx, array);\r\n        startIdx++;\r\n    }\r\n\r\n    animations.push([array.length-1, null]);\r\n\r\n    return animations;\r\n}\r\n\r\nconst swap = (i, j, array) => {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\nexport default SelectionSortAnimations;","const MergeSortAnimations = (array) => {\r\n    const animations = [];\r\n    const auxArr = array.slice();\r\n    MergeSort(array, 0, array.length - 1, auxArr, animations);\r\n    return animations;\r\n}\r\n\r\nconst MergeSort = (arr, startIdx, endIdx, auxArr, animations) => {\r\n    if (startIdx === endIdx) {\r\n        return;\r\n    }\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\r\n    MergeSort(auxArr, startIdx, middleIdx, arr, animations);\r\n    MergeSort(auxArr, middleIdx+1, endIdx, arr, animations);\r\n    merge(arr, startIdx, middleIdx, endIdx, auxArr, animations);\r\n}\r\n\r\nconst merge = (arr, startIdx, middleIdx, endIdx, auxArr, animations) => {\r\n   let k = startIdx;\r\n   let i = startIdx;\r\n   let j = middleIdx + 1;\r\n\r\n   while (i <= middleIdx && j <= endIdx) {\r\n       animations.push([[i, j], false]);\r\n       if (auxArr[i] <= auxArr[j]) {\r\n           animations.push([[k, auxArr[i]], true]);\r\n           arr[k++] = auxArr[i++];\r\n       } else {\r\n           animations.push([[k, auxArr[j]], true]);\r\n           arr[k++] = auxArr[j++];\r\n       }\r\n   }\r\n\r\n   while (i <= middleIdx) {\r\n       animations.push([[i, i], false]);\r\n       animations.push([[k, auxArr[i]], true]);\r\n       arr[k++] = auxArr[i++];\r\n   }\r\n\r\n   while (j <= endIdx) {\r\n       animations.push([[j, j], false]);\r\n       animations.push([[k, auxArr[j]], true]);\r\n       arr[k++] = auxArr[j++];\r\n   }\r\n}\r\n\r\nexport default MergeSortAnimations;","import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\nimport BubbleSortAnimations from './algorithms/BubbleSort.js';\r\nimport InsertionSortAnimations from './algorithms/InsertionSort.js';\r\nimport SelectionSortAnimations from './algorithms/SelectionSort.js';\r\nimport MergeSortAnimations from './algorithms/MergeSort.js';\r\nimport QuickSortAnimations from './algorithms/QuickSort.js';\r\n\r\nconst ANIMATION_SPEED = 1;\r\nconst FINISHED_COLOUR = '#EC9B3B';\r\nconst DEFAULT_COLOUR = '#00818A';\r\nconst NAV_OPTION_COLOR = 'white';\r\nconst NAV_OPTION_COLOR_HOVER = '#ECECEB';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    array: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.generateArray();\r\n  }\r\n\r\n  generateArray() {\r\n    const array = [];\r\n    for (let i =0; i<300; i++) {\r\n      array.push(Math.floor(Math.random() * (700 - 5 + 1) + 5));\r\n    }\r\n\r\n    this.setState({array: array});\r\n    this.resetArrayBars();\r\n  }\r\n\r\n  arrayIsSorted() {\r\n    const arrCopy = this.state.array.slice();\r\n    arrCopy.sort();\r\n    const arrState = this.state.array;\r\n\r\n    for (let i = 0; i < arrState.length; i++) {\r\n      if (arrCopy[i] !== arrState[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  toggleResetArray(style, buttonPressed) {\r\n    const buttons = document.querySelector('.main-nav-items').children;\r\n    for (let i = 0; i < buttons.length; i++) {\r\n      var currentButton = buttons[i];\r\n      currentButton.style.pointerEvents = style;\r\n\r\n      if (style === 'none') {\r\n        if (currentButton.id !== buttonPressed) {\r\n          currentButton.style.color = FINISHED_COLOUR;\r\n        } \r\n      } else {\r\n        currentButton.style.color = NAV_OPTION_COLOR;\r\n        \r\n        currentButton.onmouseover = function() {\r\n           this.style.color = NAV_OPTION_COLOR_HOVER;\r\n         }\r\n  \r\n         currentButton.onmouseleave = function() {\r\n          this.style.color = NAV_OPTION_COLOR;\r\n         }\r\n      } \r\n    }\r\n  }\r\n\r\n  changeColour(firstElement, secondElement, colour) {\r\n    firstElement.style.backgroundColor = colour;\r\n    secondElement.style.backgroundColor = colour;\r\n  }\r\n\r\n  swapHeights(firstElement, secondElement) {\r\n    const firstHeight = firstElement.style.height;\r\n    firstElement.style.height = secondElement.style.height;\r\n    secondElement.style.height = firstHeight;\r\n  }\r\n\r\n  getVisualizerArrayBars() {\r\n    return document.querySelectorAll('.list-bar');\r\n  }\r\n\r\n  resetArrayBars() {\r\n    const visualizerArray = this.getVisualizerArrayBars();\r\n    for (let i = 0; i < visualizerArray.length; i++) {\r\n      visualizerArray[i].style.backgroundColor = DEFAULT_COLOUR;\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = BubbleSortAnimations(this.state.array);\r\n    const visualizerArray = this.getVisualizerArrayBars();\r\n    this.toggleResetArray('none', 'bubbleSort');\r\n\r\n    for (let i=0; i < animations.length; i++) {\r\n\r\n      const comparisons = animations[i][0];\r\n      const swapped = animations[i][1];\r\n      const finished = animations[i][2];\r\n      const firstValue = visualizerArray[comparisons[0]];\r\n      const secondValue = visualizerArray[comparisons[1]];\r\n\r\n      if (finished) {\r\n        setTimeout(() => {\r\n          secondValue.style.backgroundColor = FINISHED_COLOUR;\r\n          this.toggleResetArray('none', 'bubbleSort');\r\n        }, i * ANIMATION_SPEED);\r\n      }\r\n\r\n      if (swapped) {\r\n        setTimeout(() => {\r\n          this.swapHeights(firstValue, secondValue);\r\n        }, i * ANIMATION_SPEED);\r\n      }\r\n\r\n      if ((i+1) === animations.length) {\r\n        setTimeout(() => {\r\n          this.toggleResetArray('auto', 'bubbleSort');\r\n        }, i * ANIMATION_SPEED)\r\n      }\r\n    \r\n    }\r\n  }\r\n\r\n  insertionSort() {\r\n    const animations = InsertionSortAnimations(this.state.array);\r\n    const visualizerArray = this.getVisualizerArrayBars(); \r\n    visualizerArray[0].style.backgroundColor = FINISHED_COLOUR;\r\n    \r\n    if (animations.length > 0) {\r\n      this.toggleResetArray('none', 'insertionSort');\r\n    }\r\n\r\n    for (let i=0; i < animations.length; i++) {\r\n      const comparisons = animations[i];\r\n      const firstValue = visualizerArray[comparisons[0]];\r\n      const secondValue = visualizerArray[comparisons[1]];\r\n\r\n      setTimeout(() => {\r\n        firstValue.style.backgroundColor = FINISHED_COLOUR;\r\n      }, i * ANIMATION_SPEED)\r\n\r\n      setTimeout(() => {\r\n        this.swapHeights(firstValue, secondValue);\r\n      }, i * ANIMATION_SPEED);\r\n\r\n      if ((i+1) === animations.length) {\r\n        setTimeout(() => {\r\n          this.toggleResetArray('auto', 'insertionSort');\r\n        }, i * ANIMATION_SPEED)\r\n      }\r\n\r\n     }\r\n  }\r\n\r\n  selectionSort() {\r\n    const animations = SelectionSortAnimations(this.state.array);\r\n    const visualizerArray = this.getVisualizerArrayBars();\r\n    this.toggleResetArray('none', 'selectionSort');\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const comparisons = animations[i];\r\n      const firstValue = visualizerArray[comparisons[0]];\r\n      const secondValue = visualizerArray[comparisons[1]];\r\n\r\n      if (secondValue == null) {\r\n        setTimeout(() => {\r\n          firstValue.style.backgroundColor = FINISHED_COLOUR;\r\n        }, i * ANIMATION_SPEED)\r\n      } else {\r\n        setTimeout(() => {\r\n          firstValue.style.backgroundColor = FINISHED_COLOUR;\r\n        }, i * ANIMATION_SPEED)\r\n  \r\n        setTimeout(() => {\r\n          this.swapHeights(firstValue, secondValue);\r\n        }, i * ANIMATION_SPEED);\r\n      }\r\n\r\n      if ((i+1) === animations.length) {\r\n        setTimeout(() => {\r\n          this.toggleResetArray('auto', 'selectionSort');\r\n        }, i * ANIMATION_SPEED)\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = MergeSortAnimations(this.state.array);\r\n    const visualizerArray = this.getVisualizerArrayBars();\r\n    this.toggleResetArray('none', 'mergeSort');\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const comparison = animations[i][0];\r\n      const swapped = animations[i][1];\r\n\r\n      if (swapped) {\r\n        setTimeout(() => {\r\n          visualizerArray[comparison[0]].style.height = `${comparison[1]}px`;\r\n          visualizerArray[comparison[0]].style.backgroundColor = FINISHED_COLOUR;\r\n        }, i * ANIMATION_SPEED);\r\n      }\r\n\r\n      if ((i+1) === animations.length) {\r\n        setTimeout(() => {\r\n          this.toggleResetArray('auto', 'mergeSort');\r\n        }, i * ANIMATION_SPEED)\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  quickSort() {\r\n    //const animations = QuickSortAnimations(this.state.array);\r\n    //const visualizerArray = this.getVisualizerArrayBars();\r\n    //this.toggleResetArray('none', 'quickSort');\r\n    //console.log(animations);\r\n    // for (let i = 0; i < animations.length; i++) {\r\n    //   const comparison = animations[i][0];\r\n    //   const swapped = animations[i][1];\r\n\r\n    //   if (swapped) {\r\n    //     setTimeout(() => {\r\n    //       this.swapHeights(visualizerArray[comparison[0]], visualizerArray[comparison[1]]);\r\n    //     }, i * ANIMATION_SPEED);\r\n    //   }\r\n\r\n    //   if ((i+1) === animations.length) {\r\n    //     setTimeout(() => {\r\n    //       this.toggleResetArray('auto', 'quickSort');\r\n    //     }, i * ANIMATION_SPEED)\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  heapSort() {}\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <nav className=\"main-nav\">\r\n          <ul className=\"main-nav-items\">\r\n            <li id=\"resetArray\" onClick={() => this.generateArray()}>\r\n            Reset Array\r\n            </li>\r\n            <li id=\"bubbleSort\" onClick={() => this.bubbleSort()}>\r\n            Bubble Sort\r\n            </li>\r\n            <li id=\"insertionSort\" onClick={() => this.insertionSort()}>\r\n            Insertion Sort\r\n            </li>\r\n            <li id=\"selectionSort\" onClick={() => this.selectionSort()}>\r\n            Selection Sort\r\n            </li>\r\n            <li id=\"mergeSort\" onClick={() => this.mergeSort()}>\r\n            Merge Sort\r\n            </li>\r\n            <li id=\"quickSort\" onClick={() => this.quickSort()}>\r\n            Quick Sort\r\n            </li>\r\n            <li id=\"heapSort\" onClick={() => this.heapSort()}>\r\n            Heap Sort\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        \r\n        <div className=\"list-container\">\r\n          {this.state.array.map((value, idx) => (\r\n          <div \r\n            className = \"list-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: DEFAULT_COLOUR,\r\n              height: `${value}px`\r\n            }}>\r\n          </div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}